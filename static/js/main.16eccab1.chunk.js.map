{"version":3,"sources":["components/Navbar.jsx","components/Login.js","components/Bookroom.js","components/ViewBookings.js","components/PageRedirect.js","components/Signup.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","currentUser","className","to","activeClassName","Login","setCurrentUser","history","useHistory","useState","username","password","data","setData","handleChange","event","value","target","name","temp","JSON","parse","stringify","handleSubmit","a","fetch","then","res","json","usersData","match","filter","e","length","console","log","push","onSubmit","preventDefault","htmlFor","type","id","onChange","required","Bookroom","room","setMessage","slot","booking","date","user","email","method","body","headers","res1","returndata","reset","roomDetails","setRoomDetails","message","useEffect","map","key","ViewBookings","result","forEach","roombooking","scope","i","PageRedirect","Redirect","Signup","onSave","document","getElementById","finalResult","this","for","Component","App","path","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.16eccab1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction Navbar({ currentUser }) {\r\n  return (\r\n    <div className=\"container-fluid pt-1\">\r\n      <div className=\"row\">\r\n        <div className=\"col-4 text-center\">\r\n          {currentUser === null ? (\r\n            <NavLink to=\"/login\" activeClassName=\"text-success\">\r\n              Login\r\n            </NavLink>\r\n          ) : (\r\n            <NavLink to=\"/logout\" activeClassName=\"text-success\">\r\n              Logout\r\n            </NavLink>\r\n          )}\r\n        </div>\r\n        <div className=\"col-4 text-center\">\r\n          <NavLink to=\"/book\" activeClassName=\"text-success\">\r\n            Book room\r\n          </NavLink>\r\n        </div>\r\n        <div className=\"col-4 text-center\">\r\n          <NavLink to=\"/view\" activeClassName=\"text-success\">\r\n            View Bookings\r\n          </NavLink>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React, { useState, useEffect } from \"react\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Login({ setCurrentUser }) {\r\n    let history = useHistory();\r\n\r\n  const [data, setData] = useState({ username: \"\", password: \"\" });\r\n\r\n  const handleChange = (event) => {\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n    var temp = JSON.parse(JSON.stringify(data));\r\n    temp[name] = value;\r\n    setData(temp);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    const usersData = await fetch(\"https://eventmgmt-event.herokuapp.com/events\").then((res) =>\r\n      res.json()\r\n    );\r\n    const match = usersData.filter(\r\n      (e) => e.username === data.username && e.password === data.password\r\n    );\r\n    if (match.length === 1) {\r\n      setCurrentUser(match[0]);\r\n      console.log(match);\r\n      \r\n      history.push(\"/book\")\r\n    } else {\r\n      console.log(\"Email/Password is incorrect\");\r\n      console.log(match);\r\n      \r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4\"> </div>\r\n        <div className=\"col-md-4\">\r\n          <form\r\n            onSubmit={(event) => {\r\n              event.preventDefault();\r\n              handleSubmit();\r\n            }}\r\n          >\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"exampleInputEmail1\">username</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"username\"\r\n               \r\n                name=\"username\"\r\n                value={data.username}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n              <input\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                id=\"exampleInputPassword1\"\r\n                name=\"password\"\r\n                value={data.password}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Login\r\n            </button>\r\n            <Link to = \"/Signup\"><button className=\"btn btn-primary\">SignUp Here</button></Link>\r\n          </form>\r\n        </div>\r\n        <div className=\"col-md-4\"> </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Bookroom({ currentUser }) {\r\n  const handleChange = (event) => {\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n    var temp = JSON.parse(JSON.stringify(data));\r\n    temp[name] = value;\r\n    setData(temp);\r\n    console.log(data);\r\n  };\r\n  const handleSubmit = async (event) => {\r\n    if (data.room === \"\") {\r\n      setMessage([\"text-danger\", \"Select a room\"]);\r\n      return;\r\n    }\r\n    if (data.slot === \"\") {\r\n      setMessage([\"text-danger\", \"Select a time slot\"]);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`https://eventmgmt-event.herokuapp.com/event${data.room}`);\r\n      const room = await res.json();\r\n      let result = room.booking.filter(\r\n        (e) => e.date === data.date && e.slot === data.slot\r\n      );\r\n      if (result.length !== 0) {\r\n        console.log(\"Already booked\");\r\n        setMessage([\"text-danger\", \"Entered Time slot is already booked\"]);\r\n        return;\r\n      }\r\n      room.booking.push({\r\n        date: data.date,\r\n        slot: data.slot,\r\n        user: currentUser.email,\r\n      });\r\n\r\n      const res1 = await fetch(`https://eventmgmt-event.herokuapp.com/events${data.room}`, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(room),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      const returndata = await res1.json();\r\n      setMessage([\"text-success\", \"Room booked successfully\"]);\r\n      event.reset();\r\n\r\n      console.log(returndata);\r\n    } catch (err) {\r\n      console.log(err);\r\n      setMessage([\"text-danger\", \"Something went wrong\"]);\r\n    }\r\n  };\r\n\r\n  const [data, setData] = useState({ room: \"\", date: \"\", slot: \"\" });\r\n\r\n  const [roomDetails, setRoomDetails] = useState([]);\r\n\r\n  const [message, setMessage] = useState([\"\", \"\"]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://eventmgmt-event.herokuapp.com/events\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setRoomDetails(data);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-3\"> </div>\r\n        <div className=\"col-md-6\">\r\n          <form\r\n            onSubmit={(event) => {\r\n              event.preventDefault();\r\n              handleSubmit(event.target);\r\n            }}\r\n          >\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"room-select\">Select A room :</label>\r\n              <select\r\n                className=\"form-control\"\r\n                id=\"room-select\"\r\n                value={data.room}\r\n                name=\"room\"\r\n                onChange={handleChange}\r\n              >\r\n                <option>Default select</option>\r\n                {roomDetails.map((room) => (\r\n                  <option key={room.id} value={room.id}>\r\n                    {room.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"date\">Date</label>\r\n              <input\r\n                type=\"date\"\r\n                className=\"form-control\"\r\n                id=\"date\"\r\n                name=\"date\"\r\n                value={data.date}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"time\">Time Slot</label>\r\n              <select\r\n                name=\"slot\"\r\n                className=\"form-control\"\r\n                onChange={handleChange}\r\n                value={data.slot}\r\n                required\r\n              >\r\n                <option>Default select</option>\r\n                <option value=\"07:00-08:00\">07.00 AM - 08.00 AM</option>\r\n                <option value=\"09:00-10:00\">09.00 AM - 10.00 AM</option>\r\n                <option value=\"11:00-12:00\">11.00 AM - 12.00 PM</option>\r\n                <option value=\"13:00-14:00\">01.00 PM - 02.00 PM</option>\r\n                <option value=\"15:00-16:00\">03.00 PM - 04.00 PM</option>  \r\n                <option value=\"17:00-18:00\">05.00 PM - 06.00 PM</option>\r\n              </select>\r\n            </div>\r\n\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Book\r\n            </button>\r\n          </form>\r\n          <div className=\"mt-3 text-center\">\r\n            <p className={message[0]}>{message[1]}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-3\"> </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Bookroom;","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction ViewBookings({ currentUser }) {\r\n  const [roomDetails, setRoomDetails] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://eventmgmt-event.herokuapp.com/events\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        let result = [];\r\n        data.forEach((room) =>\r\n          room.booking.forEach((roombooking) => {\r\n            if (roombooking.user === currentUser.email)\r\n              result.push({ ...roombooking, name: room.name });\r\n          })\r\n        );\r\n        setRoomDetails(result);\r\n        console.log(result);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className = \"mt-3\">\r\n      \r\n      {roomDetails.length === 0 ? (\r\n        <div className=\"text-center\" >U have no bookings</div>\r\n      ) : (\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">#</th>\r\n              <th scope=\"col\">Room</th>\r\n              <th scope=\"col\">Date</th>\r\n              <th scope=\"col\">Timings</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {roomDetails.map((e, i) => (\r\n              <tr>\r\n                <th scope=\"row\">{i}</th>\r\n                <td>{e.name}</td>\r\n                <td>{e.date}</td>\r\n                <td>{e.slot}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewBookings;","import React, { useEffect } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction PageRedirect({ Redirect ,setCurrentUser}) {\r\n    setCurrentUser(null)\r\n  return (\r\n    <div className = \"text-center mt-5\">\r\n      You are signed out ... Want to {\" \"}\r\n      <NavLink to=\"/login\" activeClassName=\"text-success\">\r\n        Login\r\n      </NavLink>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PageRedirect;","import React, { Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class Signup extends Component {\r\n\r\n    onSave = async(e) => {\r\n        e.preventDefault();\r\n    \r\n        try{\r\n          var data = await fetch(\"https://eventmgmt-event.herokuapp.com/event\",{\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body : JSON.stringify({\r\n              username : document.getElementById(\"username\").value,\r\n              \r\n              password : document.getElementById(\"password\").value,\r\n            }),\r\n          });\r\n          let finalResult = await data.json();\r\n                console.log(finalResult);\r\n                console.log(\"finalResult\");\r\n                }catch (error){\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n           <h3>Sign UP</h3>\r\n           <form onSubmit={this.onSave}>\r\n            \r\n             <div className = \"form-group row\" >\r\n             <label for=\"name\" className = \"col-sm-2 col-form-label\">Name</label>\r\n             <div className = \"col-sm-10\">\r\n             <input type=\"text\" id=\"username\" name=\"name\" className=\"inputDisplay\" />\r\n             </div>\r\n             </div>\r\n\r\n             <br />\r\n            \r\n             <div className = \"form-group row\" >\r\n             <label for=\"password\" className = \"col-sm-2 col-form-label \">Password</label>\r\n             <div className = \"col-sm-10\">\r\n             <input type=\"password\" id=\"password\" name=\"password\" className=\"inputDisplay\"/>\r\n             </div>\r\n             </div>\r\n            \r\n             <br />\r\n            \r\n             <input type=\"submit\" value=\"Submit\" />\r\n            \r\n          </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport {\n  Route,\n  Switch,\n  BrowserRouter as Router,\n  Redirect,\n} from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport Bookroom from \"./components/Bookroom\";\nimport ViewBookings from \"./components/ViewBookings\";\nimport PageRedirect from \"./components/PageRedirect\";\nimport Signup from \"./components/Signup\";\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null);\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar currentUser={currentUser} />\n        <Switch>\n          <Route path=\"/login\" exact>\n            <Login setCurrentUser={setCurrentUser} />\n          </Route>\n          <Route path=\"/book\" exact>\n          {currentUser === null ? (\n              <Redirect to=\"/logout\" />\n            ) : (\n              <Bookroom currentUser={currentUser} />\n            )}\n          </Route>\n          <Route path=\"/view\" exact>\n            {currentUser === null ? (\n              <Redirect to=\"/logout\" />\n            ) : (\n              <ViewBookings currentUser={currentUser} />\n            )}\n          </Route>\n          <Route path=\"/logout\" exact>\n            <PageRedirect setCurrentUser={setCurrentUser} />\n          </Route>\n          <Route path=\"/Signup\" exact>\n          <Signup setCurrentUser={setCurrentUser} />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}